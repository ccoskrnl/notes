const{entries:$}=Object,{fromEntries:et}=Object,st="ENTRIES",D="KEYS",W="VALUES",_="";class S{set;_type;_path;constructor(t,s){const n=t._tree,o=Array.from(n.keys());this.set=t,this._type=s,this._path=o.length>0?[{node:n,keys:o}]:[]}next(){const t=this.dive();return this.backtrack(),t}dive(){if(this._path.length===0)return{done:!0,value:void 0};const{node:t,keys:s}=b(this._path);if(b(s)===_)return{done:!1,value:this.result()};const n=t.get(b(s));return this._path.push({node:n,keys:Array.from(n.keys())}),this.dive()}backtrack(){if(this._path.length===0)return;const t=b(this._path).keys;t.pop(),!(t.length>0)&&(this._path.pop(),this.backtrack())}key(){return this.set._prefix+this._path.map(({keys:t})=>b(t)).filter(t=>t!==_).join("")}value(){return b(this._path).node.get(_)}result(){switch(this._type){case W:return this.value();case D:return this.key();default:return[this.key(),this.value()]}}[Symbol.iterator](){return this}}const b=e=>e[e.length-1],nt=(e,t,s)=>{const n=new Map;if(t===void 0)return n;const o=t.length+1,r=o+s,c=new Uint8Array(r*o).fill(s+1);for(let i=0;i<o;++i)c[i]=i;for(let i=1;i<r;++i)c[i*o]=i;return q(e,t,s,n,c,1,o,""),n},q=(e,t,s,n,o,r,c,i)=>{const h=r*c;t:for(const u of e.keys())if(u===_){const l=o[h-1];l<=s&&n.set(i,[e.get(u),l])}else{let l=r;for(let f=0;f<u.length;++f,++l){const m=u[f],g=c*l,y=g-c;let d=o[g];const a=Math.max(0,l-s-1),w=Math.min(c-1,l+s);for(let p=a;p<w;++p){const O=m!==t[p],C=o[y+p]+ +O,k=o[y+p+1]+1,x=o[g+p]+1,v=o[g+p+1]=Math.min(C,k,x);v<d&&(d=v)}if(d>s)continue t}q(e.get(u),t,s,n,o,l,c,i+u)}};class z{_tree;_prefix;_size=void 0;constructor(t=new Map,s=""){this._tree=t,this._prefix=s}atPrefix(t){if(!t.startsWith(this._prefix))throw new Error("Mismatched prefix");const[s,n]=I(this._tree,t.slice(this._prefix.length));if(s===void 0){const[o,r]=L(n);for(const c of o.keys())if(c!==_&&c.startsWith(r)){const i=new Map;return i.set(c.slice(r.length),o.get(c)),new z(i,t)}}return new z(s,t)}clear(){this._size=void 0,this._tree.clear()}delete(t){return this._size=void 0,ot(this._tree,t)}entries(){return new S(this,st)}forEach(t){for(const[s,n]of this)t(s,n,this)}fuzzyGet(t,s){return nt(this._tree,t,s)}get(t){const s=F(this._tree,t);return s!==void 0?s.get(_):void 0}has(t){return F(this._tree,t)?.has(_)??!1}keys(){return new S(this,D)}set(t,s){if(typeof t!="string")throw new Error("key must be a string");return this._size=void 0,E(this._tree,t).set(_,s),this}get size(){if(this._size)return this._size;this._size=0;const t=this.entries();for(;!t.next().done;)this._size+=1;return this._size}update(t,s){if(typeof t!="string")throw new Error("key must be a string");this._size=void 0;const n=E(this._tree,t);return n.set(_,s(n.get(_))),this}fetch(t,s){if(typeof t!="string")throw new Error("key must be a string");this._size=void 0;const n=E(this._tree,t);let o=n.get(_);return o===void 0&&n.set(_,o=s()),o}values(){return new S(this,W)}[Symbol.iterator](){return this.entries()}static from(t){const s=new z;for(const[n,o]of t)s.set(n,o);return s}static fromObject(t){return z.from(Object.entries(t))}}const I=(e,t,s=[])=>{if(t.length===0||e==null)return[e,s];for(const n of e.keys())if(n!==_&&t.startsWith(n))return s.push([e,n]),I(e.get(n),t.slice(n.length),s);return s.push([e,t]),I(void 0,"",s)},F=(e,t)=>{if(t.length===0||e==null)return e;for(const s of e.keys())if(s!==_&&t.startsWith(s))return F(e.get(s),t.slice(s.length))},E=(e,t)=>{const s=t.length;t:for(let n=0;e&&n<s;){for(const r of e.keys())if(r!==_&&t[n]===r[0]){const c=Math.min(s-n,r.length);let i=1;for(;i<c&&t[n+i]===r[i];)++i;const h=e.get(r);if(i===r.length)e=h;else{const u=new Map;u.set(r.slice(i),h),e.set(t.slice(n,n+i),u),e.delete(r),e=u}n+=i;continue t}const o=new Map;return e.set(t.slice(n),o),o}return e},ot=(e,t)=>{const[s,n]=I(e,t);if(s!==void 0){if(s.delete(_),s.size===0)R(n);else if(s.size===1){const[o,r]=s.entries().next().value;A(n,o,r)}}},R=e=>{if(e.length===0)return;const[t,s]=L(e);if(t.delete(s),t.size===0)R(e.slice(0,-1));else if(t.size===1){const[n,o]=t.entries().next().value;n!==_&&A(e.slice(0,-1),n,o)}},A=(e,t,s)=>{if(e.length===0)return;const[n,o]=L(e);n.set(o+t,s),n.delete(o)},L=e=>e[e.length-1],rt=(e,t)=>{const s=e._idToShortId.get(t);if(s!=null)return e._storedFields.get(s)},it=/[\n\r\p{Z}\p{P}]+/u,j="or",N="and",ct="and_not",ut=(e,t)=>{e.includes(t)||e.push(t)},B=(e,t)=>{for(const s of t)e.includes(s)||e.push(s)},P=({score:e},{score:t})=>t-e,lt=()=>new Map,M=e=>{const t=new Map;for(const s of Object.keys(e))t.set(parseInt(s,10),e[s]);return t},G=(e,t)=>Object.prototype.hasOwnProperty.call(e,t)?e[t]:void 0,ht={[j]:(e,t)=>{for(const s of t.keys()){const n=e.get(s);if(n==null)e.set(s,t.get(s));else{const{score:o,terms:r,match:c}=t.get(s);n.score=n.score+o,n.match=Object.assign(n.match,c),B(n.terms,r)}}return e},[N]:(e,t)=>{const s=new Map;for(const n of t.keys()){const o=e.get(n);if(o==null)continue;const{score:r,terms:c,match:i}=t.get(n);B(o.terms,c),s.set(n,{score:o.score+r,terms:o.terms,match:Object.assign(o.match,i)})}return s},[ct]:(e,t)=>{for(const s of t.keys())e.delete(s);return e}},dt=(e,t,s,n,o,r)=>{const{k:c,b:i,d:h}=r;return Math.log(1+(s-t+.5)/(t+.5))*(h+e*(c+1)/(e+c*(1-i+i*n/o)))},at=e=>(t,s,n)=>({term:t,fuzzy:typeof e.fuzzy=="function"?e.fuzzy(t,s,n):e.fuzzy??!1,prefix:typeof e.prefix=="function"?e.prefix(t,s,n):e.prefix===!0,termBoost:typeof e.boostTerm=="function"?e.boostTerm(t,s,n):1}),H=(e,t,s,n)=>{for(const o of Object.keys(e._fieldIds))if(e._fieldIds[o]===s){e._options.logger("warn",`SlimSearch: document with ID ${e._documentIds.get(t)} has changed before removal: term "${n}" was not present in field "${o}". Removing a document after it has changed can corrupt the index!`,"version_conflict");return}},ft=(e,t,s,n)=>{if(!e._index.has(n)){H(e,s,t,n);return}const o=e._index.fetch(n,lt),r=o.get(t);r?.get(s)==null?H(e,s,t,n):r.get(s)<=1?r.size<=1?o.delete(t):r.delete(s):r.set(s,r.get(s)-1),e._index.get(n).size===0&&e._index.delete(n)},mt={k:1.2,b:.7,d:.5},gt={idField:"id",extractField:(e,t)=>e[t],tokenize:e=>e.split(it),processTerm:e=>e.toLowerCase(),fields:void 0,searchOptions:void 0,storeFields:[],logger:(e,t)=>{typeof console?.[e]=="function"&&console[e](t)},autoVacuum:!0},J={combineWith:j,prefix:!1,fuzzy:!1,maxFuzzy:6,boost:{},weights:{fuzzy:.45,prefix:.375},bm25:mt},pt={combineWith:N,prefix:(e,t,s)=>t===s.length-1},_t={batchSize:1e3,batchWait:10},Y={minDirtFactor:.1,minDirtCount:20},yt={..._t,...Y},K=Symbol("*"),wt=(e,t)=>{const s=new Map,n={...e._options.searchOptions,...t};for(const[o,r]of e._documentIds){const c=n.boostDocument?n.boostDocument(r,"",e._storedFields.get(o)):1;s.set(o,{score:c,terms:[],match:{}})}return s},U=(e,t=j)=>{if(e.length===0)return new Map;const s=t.toLowerCase(),n=ht[s];if(!n)throw new Error(`Invalid combination operator: ${t}`);return e.reduce(n)||new Map},T=(e,t,s,n,o,r,c,i,h,u=new Map)=>{if(r==null)return u;for(const l of Object.keys(c)){const f=c[l],m=e._fieldIds[l],g=r.get(m);if(g==null)continue;let y=g.size;const d=e._avgFieldLength[m];for(const a of g.keys()){if(!e._documentIds.has(a)){ft(e,m,a,s),y-=1;continue}const w=i?i(e._documentIds.get(a),s,e._storedFields.get(a)):1;if(!w)continue;const p=g.get(a),O=e._fieldLength.get(a)[m],C=dt(p,y,e._documentCount,O,d,h),k=n*o*f*w*C,x=u.get(a);if(x){x.score+=k,ut(x.terms,t);const v=G(x.match,s);v?v.push(l):x.match[s]=[l]}else u.set(a,{score:k,terms:[t],match:{[s]:[l]}})}}return u},xt=(e,t,s)=>{const n={...e._options.searchOptions,...s},o=(n.fields??e._options.fields).reduce((d,a)=>({...d,[a]:G(n.boost,a)||1}),{}),{boostDocument:r,weights:c,maxFuzzy:i,bm25:h}=n,{fuzzy:u,prefix:l}={...J.weights,...c},f=e._index.get(t.term),m=T(e,t.term,t.term,1,t.termBoost,f,o,r,h);let g,y;if(t.prefix&&(g=e._index.atPrefix(t.term)),t.fuzzy){const d=t.fuzzy===!0?.2:t.fuzzy,a=d<1?Math.min(i,Math.round(t.term.length*d)):d;a&&(y=e._index.fuzzyGet(t.term,a))}if(g)for(const[d,a]of g){const w=d.length-t.term.length;if(!w)continue;y?.delete(d);const p=l*d.length/(d.length+.3*w);T(e,t.term,d,p,t.termBoost,a,o,r,h,m)}if(y)for(const d of y.keys()){const[a,w]=y.get(d);if(!w)continue;const p=u*d.length/(d.length+w);T(e,t.term,d,p,t.termBoost,a,o,r,h,m)}return m},Q=(e,t,s={})=>{if(t===K)return wt(e,s);if(typeof t!="string"){const l={...s,...t,queries:void 0},f=t.queries.map(m=>Q(e,m,l));return U(f,l.combineWith)}const{tokenize:n,processTerm:o,searchOptions:r}=e._options,c={tokenize:n,processTerm:o,...r,...s},{tokenize:i,processTerm:h}=c,u=i(t).flatMap(l=>h(l)).filter(l=>!!l).map(at(c)).map(l=>xt(e,l,c));return U(u,c.combineWith)},X=(e,t,s={})=>{const n=Q(e,t,s),o=[];for(const[r,{score:c,terms:i,match:h}]of n){const u=i.length||1,l={id:e._documentIds.get(r),score:c*u,terms:Object.keys(h),queryTerms:i,match:h};Object.assign(l,e._storedFields.get(r)),(s.filter==null||s.filter(l))&&o.push(l)}return t===K&&s.boostDocument==null&&e._options.searchOptions.boostDocument==null||o.sort(P),o},zt=(e,t,s={})=>{s={...e._options.autoSuggestOptions,...s};const n=new Map;for(const{score:r,terms:c}of X(e,t,s)){const i=c.join(" "),h=n.get(i);h!=null?(h.score+=r,h.count+=1):n.set(i,{score:r,terms:c,count:1})}const o=[];for(const[r,{score:c,terms:i,count:h}]of n)o.push({suggestion:r,terms:i,score:c/h});return o.sort(P),o};class bt{_options;_index;_documentCount;_documentIds;_idToShortId;_fieldIds;_fieldLength;_avgFieldLength;_nextId;_storedFields;_dirtCount;_currentVacuum;_enqueuedVacuum;_enqueuedVacuumConditions;constructor(t){if(t?.fields==null)throw new Error('SlimSearch: option "fields" must be provided');const s=t.autoVacuum==null||t.autoVacuum===!0?yt:t.autoVacuum;this._options={...gt,...t,autoVacuum:s,searchOptions:{...J,...t.searchOptions},autoSuggestOptions:{...pt,...t.autoSuggestOptions}},this._index=new z,this._documentCount=0,this._documentIds=new Map,this._idToShortId=new Map,this._fieldIds={},this._fieldLength=new Map,this._avgFieldLength=[],this._nextId=0,this._storedFields=new Map,this._dirtCount=0,this._currentVacuum=null,this._enqueuedVacuum=null,this._enqueuedVacuumConditions=Y,this.addFields(this._options.fields)}get isVacuuming(){return this._currentVacuum!=null}get dirtCount(){return this._dirtCount}get dirtFactor(){return this._dirtCount/(1+this._documentCount+this._dirtCount)}get documentCount(){return this._documentCount}get termCount(){return this._index.size}toJSON(){const t=[];for(const[s,n]of this._index){const o={};for(const[r,c]of n)o[r]=Object.fromEntries(c);t.push([s,o])}return{documentCount:this._documentCount,nextId:this._nextId,documentIds:Object.fromEntries(this._documentIds),fieldIds:this._fieldIds,fieldLength:Object.fromEntries(this._fieldLength),averageFieldLength:this._avgFieldLength,storedFields:Object.fromEntries(this._storedFields),dirtCount:this._dirtCount,index:t,version:2}}addFields(t){for(let s=0;s<t.length;s++)this._fieldIds[t[s]]=s}}const vt=e=>new bt(e),kt=({documentCount:e,nextId:t,fieldIds:s,averageFieldLength:n,dirtCount:o,version:r},c)=>{if(r!==2)throw new Error("SlimSearch: cannot deserialize an index created with an incompatible version");const i=vt(c);return i._documentCount=e,i._nextId=t,i._idToShortId=new Map,i._fieldIds=s,i._avgFieldLength=n,i._dirtCount=o??0,i._index=new z,i},It=(e,t)=>{const{index:s,documentIds:n,fieldLength:o,storedFields:r}=e,c=kt(e,t);c._documentIds=M(n),c._fieldLength=M(o),c._storedFields=M(r);for(const[i,h]of c._documentIds)c._idToShortId.set(h,i);for(const[i,h]of s){const u=new Map;for(const l of Object.keys(h))u.set(parseInt(l,10),M(h[l]));c._index.set(i,u)}return c},V=(e,t)=>{const s=e.toLowerCase(),n=t.toLowerCase(),o=[];let r=0,c=0;const i=(u,l=!1)=>{let f;c===0?f=u.length>20?`… ${u.slice(-20)}`:u:l?f=u.length+c>100?`${u.slice(0,100-c)}… `:u:f=u.length>20?`${u.slice(0,20)} … ${u.slice(-20)}`:u,f&&o.push(f),c+=f.length,l||(o.push(["mark",t]),c+=t.length,c>=100&&o.push(" …"))};let h=s.indexOf(n,r);if(h===-1)return null;for(;h>=0;){const u=h+n.length;if(i(e.slice(r,h)),r=u,c>100)break;h=s.indexOf(n,r)}return c<100&&i(e.slice(r),!0),o},Mt=(e,t)=>t.contents.reduce((s,[,n])=>s+n,0)-e.contents.reduce((s,[,n])=>s+n,0),Ot=(e,t)=>Math.max(...t.contents.map(([,s])=>s))-Math.max(...e.contents.map(([,s])=>s)),Z=(e,t,s={})=>{const n={};return X(t,e,{boost:{h:2,t:1,c:4},prefix:!0,...s}).forEach(o=>{const{id:r,terms:c,score:i}=o,h=r.includes("@"),u=r.includes("#"),[l,f]=r.split(/[#@]/),m=Number(l),g=c.sort((d,a)=>d.length-a.length).filter((d,a)=>c.slice(a+1).every(w=>!w.includes(d))),{contents:y}=n[m]??={title:"",contents:[]};if(h)y.push([{type:"customField",id:m,index:f,display:g.map(d=>o.c.map(a=>V(a,d))).flat().filter(d=>d!==null)},i]);else{const d=g.map(a=>V(o.h,a)).filter(a=>a!==null);if(d.length&&y.push([{type:u?"heading":"title",id:m,...u&&{anchor:f},display:d},i]),"t"in o&&o.t)for(const a of o.t){const w=g.map(p=>V(a,p)).filter(p=>p!==null);w.length&&y.push([{type:"text",id:m,...u&&{anchor:f},display:w},i])}}}),$(n).sort(([,o],[,r])=>"max"==="total"?Mt(o,r):Ot(o,r)).map(([o,{title:r,contents:c}])=>{if(!r){const i=rt(t,o);i&&(r=i.h)}return{title:r,contents:c.map(([i])=>i)}})},tt=(e,t,s={})=>{const n=zt(t,e,{fuzzy:.2,maxFuzzy:3,...s}).map(({suggestion:o})=>o);return e.includes(" ")?n:n.filter(o=>!o.includes(" "))},Ct=et($(JSON.parse("{\"/\":{\"documentCount\":155,\"nextId\":155,\"documentIds\":{\"0\":\"0\",\"1\":\"0#compiler\",\"2\":\"0#分析基础\",\"3\":\"0#静态单赋值形式-static-single-assignment-ssa\",\"4\":\"0#格论-lattice-theory\",\"5\":\"0#常量传播中的常量格\",\"6\":\"0#数据流分析\",\"7\":\"0#单调数据流分析框架\",\"8\":\"0#数据流分析基础\",\"9\":\"0#到达定值\",\"10\":\"0#符号执行-symbolic-execution\",\"11\":\"0#稀疏条件常量传播-sparse-conditional-constant-propagation\",\"12\":\"0#计算机系统\",\"13\":\"0#计算机存储结构\",\"14\":\"0#pcie内存获取技术\",\"15\":\"0#操作系统内核\",\"16\":\"0#ntoskrnl\",\"17\":\"0#windows-apc\",\"18\":\"0#对象管理\",\"19\":\"0#句柄\",\"20\":\"0#驱动\",\"21\":\"1\",\"22\":\"1#定义\",\"23\":\"1#top-⊤-状态-未知但有潜力\",\"24\":\"1#const-状态-确定是常量\",\"25\":\"1#bottom-nac-状态-确定不是常量\",\"26\":\"1#常量格的单调性\",\"27\":\"1#函数的返回值处理\",\"28\":\"1#一、函数调用处理的三大核心原则\",\"29\":\"1#二、函数调用分类处理策略\",\"30\":\"1#_1-完全可知函数-纯函数-内联函数\",\"31\":\"1#_2-部分可知函数-有摘要信息的库函数\",\"32\":\"1#_3-完全未知函数-外部-动态函数\",\"33\":\"1#三、格值设置详细规则\",\"34\":\"1#返回值格值计算\",\"35\":\"1#副作用处理\",\"36\":\"1#四、高级处理技术\",\"37\":\"1#_1-上下文敏感分析-context-sensitivity\",\"38\":\"1#_2-函数指针处理\",\"39\":\"1#_3-递归函数处理\",\"40\":\"1#五、具体实现示例\",\"41\":\"1#六、优化实践建议\",\"42\":\"1#函数处理\",\"43\":\"1#meet-操作\",\"44\":\"1#参数处理\",\"45\":\"1#函数示例分析\",\"46\":\"1#案例1-一致路径-未知路径\",\"47\":\"1#案例2-冲突路径\",\"48\":\"1#案例3-部分已知-nac\",\"49\":\"1#案例4-循环中的phi\",\"50\":\"1#实际案例分析\",\"51\":\"1#_1-设置为-nac-的情况\",\"52\":\"1#_2-设置为-top-的情况\",\"53\":\"1#其他案例\",\"54\":\"2\",\"55\":\"2#基础\",\"56\":\"2#偏序-partial-order\",\"57\":\"2#字典序-lexicographic-order\",\"58\":\"2#哈斯图-hasse-diagrams\",\"59\":\"2#最大元素和最小元素-maximal-and-minimal-elements\",\"60\":\"2#拓扑排序-topological-sorting\",\"61\":\"2#格-lattice\",\"62\":\"2#_1-核心定义\",\"63\":\"2#_2-等价代数定义\",\"64\":\"2#_3-格的分类\",\"65\":\"2#_4-示例\",\"66\":\"2#乘积格-product-lattice\",\"67\":\"3\",\"68\":\"3#ssa-定义与计算\",\"69\":\"3#支配者-dominator\",\"70\":\"3#函数的放置位置-where-to-place-functions\",\"71\":\"3#支配边界-dominance-frontier\",\"72\":\"3#迭代支配边界-iterated-dominance-frontier\",\"73\":\"3#关键属性-key-properties\",\"74\":\"3#最小化ssa算法实现\",\"75\":\"3#ssa边\",\"76\":\"3#定义\",\"77\":\"3#ssa-边的类型\",\"78\":\"3#计算\",\"79\":\"3#示例\",\"80\":\"3#references\",\"81\":\"4\",\"82\":\"4#介绍\",\"83\":\"4#算法实现\",\"84\":\"4#总结\",\"85\":\"4#示例\",\"86\":\"5\",\"87\":\"5#数据流分析模式\",\"88\":\"5#传递函数\",\"89\":\"5#控制流约束\",\"90\":\"5#基本块上的数据流模式\",\"91\":\"5#传递方程\",\"92\":\"5#控制流方程\",\"93\":\"5#初始值与安全值\",\"94\":\"5#may分析和must分析\",\"95\":\"5#数据流分析框架\",\"96\":\"5#半格\",\"97\":\"5#传递函数-1\",\"98\":\"5#单调框架\",\"99\":\"5#数据流的解\",\"100\":\"5#迭代算法\",\"101\":\"5#参考文献\",\"102\":\"6\",\"103\":\"6#lattice-theoretic\",\"104\":\"6#monotone-data-flow-analysis-frameworks-1\",\"105\":\"6#approaches-to-solving-monotone-data-flow-analysis-problems\",\"106\":\"6#undecidability-of-the-mop-problem-for-monotone-data-flow-analysis-frameworks\",\"107\":\"6#references\",\"108\":\"7\",\"109\":\"7#到达定值的传递方程\",\"110\":\"7#到达定值的格\",\"111\":\"7#初始值和安全值\",\"112\":\"8\",\"113\":\"8#现代计算机体系结构的内存组织\",\"114\":\"8#现代内存组织\",\"115\":\"8#iommu\",\"116\":\"8#pch\",\"117\":\"8#dma\",\"118\":\"8#peripheral-component-interconnect-express\",\"119\":\"8#pci和pcie\",\"120\":\"8#协议层\",\"121\":\"8#pcie-外围设备\",\"122\":\"8#根复合体\",\"123\":\"8#使用pcie的dma\",\"124\":\"9\",\"125\":\"9#apc对象\",\"126\":\"9#管理apc\",\"127\":\"9#apc-交付情况\",\"128\":\"10\",\"129\":\"10#主功能处理机制\",\"130\":\"10#i-o-请求包-irp-解析\",\"131\":\"10#设备控制请求-ioctl-专项说明\",\"132\":\"10#ioctl-控制码深度解析\",\"133\":\"11\",\"134\":\"12\",\"135\":\"13\",\"136\":\"14\",\"137\":\"15\",\"138\":\"16\",\"139\":\"17\",\"140\":\"18\",\"141\":\"19\",\"142\":\"20\",\"143\":\"21\",\"144\":\"22\",\"145\":\"23\",\"146\":\"24\",\"147\":\"25\",\"148\":\"26\",\"149\":\"27\",\"150\":\"28\",\"151\":\"29\",\"152\":\"30\",\"153\":\"31\",\"154\":\"32\"},\"fieldIds\":{\"h\":0,\"t\":1,\"c\":2},\"fieldLength\":{\"0\":[1],\"1\":[1],\"2\":[1],\"3\":[6],\"4\":[4],\"5\":[1],\"6\":[1],\"7\":[1],\"8\":[1],\"9\":[1],\"10\":[4],\"11\":[6],\"12\":[1],\"13\":[1],\"14\":[1],\"15\":[1],\"16\":[1],\"17\":[2],\"18\":[1],\"19\":[1],\"20\":[1],\"21\":[1],\"22\":[1],\"23\":[4],\"24\":[3],\"25\":[4],\"26\":[1],\"27\":[1],\"28\":[2],\"29\":[2],\"30\":[5],\"31\":[4],\"32\":[5],\"33\":[2],\"34\":[2],\"35\":[2],\"36\":[2],\"37\":[5],\"38\":[2],\"39\":[2],\"40\":[2],\"41\":[2],\"42\":[1],\"43\":[2],\"44\":[1],\"45\":[1],\"46\":[4],\"47\":[2],\"48\":[4],\"49\":[2],\"50\":[1],\"51\":[4],\"52\":[4],\"53\":[1],\"54\":[1],\"55\":[1],\"56\":[4],\"57\":[4],\"58\":[4],\"59\":[6],\"60\":[4],\"61\":[3],\"62\":[2],\"63\":[2],\"64\":[2],\"65\":[2],\"66\":[4],\"67\":[6],\"68\":[2],\"69\":[3],\"70\":[6],\"71\":[4],\"72\":[5],\"73\":[4],\"74\":[1],\"75\":[1],\"76\":[1],\"77\":[2],\"78\":[1],\"79\":[1],\"80\":[1],\"81\":[4],\"82\":[1],\"83\":[1],\"84\":[1],\"85\":[1],\"86\":[1],\"87\":[1],\"88\":[1],\"89\":[1],\"90\":[1],\"91\":[1],\"92\":[1],\"93\":[1],\"94\":[1],\"95\":[1],\"96\":[1],\"97\":[1],\"98\":[1],\"99\":[1],\"100\":[1],\"101\":[1],\"102\":[5],\"103\":[2],\"104\":[5],\"105\":[8],\"106\":[11],\"107\":[1],\"108\":[1],\"109\":[1],\"110\":[1],\"111\":[1],\"112\":[2],\"113\":[1],\"114\":[1],\"115\":[1],\"116\":[1],\"117\":[1],\"118\":[4],\"119\":[1],\"120\":[1],\"121\":[2],\"122\":[1],\"123\":[1],\"124\":[3],\"125\":[1],\"126\":[1],\"127\":[2],\"128\":[2],\"129\":[1],\"130\":[5],\"131\":[3],\"132\":[2],\"133\":[1],\"134\":[1],\"135\":[1],\"136\":[1],\"137\":[1],\"138\":[1],\"139\":[1],\"140\":[1],\"141\":[2],\"142\":[1],\"143\":[3],\"144\":[1],\"145\":[2],\"146\":[3],\"147\":[1],\"148\":[2],\"149\":[1],\"150\":[1],\"151\":[2],\"152\":[1],\"153\":[1],\"154\":[1]},\"averageFieldLength\":[2.0838709677419356],\"storedFields\":{\"0\":{\"h\":\"城城的笔记\"},\"1\":{\"h\":\"Compiler\"},\"2\":{\"h\":\"分析基础\"},\"3\":{\"h\":\"静态单赋值形式(Static Single Assignment (SSA))\"},\"4\":{\"h\":\"格论(Lattice Theory)\"},\"5\":{\"h\":\"常量传播中的常量格\"},\"6\":{\"h\":\"数据流分析\"},\"7\":{\"h\":\"单调数据流分析框架\"},\"8\":{\"h\":\"数据流分析基础\"},\"9\":{\"h\":\"到达定值\"},\"10\":{\"h\":\"符号执行(Symbolic Execution)\"},\"11\":{\"h\":\"稀疏条件常量传播(Sparse Conditional Constant Propagation)\"},\"12\":{\"h\":\"计算机系统\"},\"13\":{\"h\":\"计算机存储结构\"},\"14\":{\"h\":\"PCIe内存获取技术\"},\"15\":{\"h\":\"操作系统内核\"},\"16\":{\"h\":\"ntoskrnl\"},\"17\":{\"h\":\"Windows APC\"},\"18\":{\"h\":\"对象管理\"},\"19\":{\"h\":\"句柄\"},\"20\":{\"h\":\"驱动\"},\"21\":{\"h\":\"常量传播的格\"},\"22\":{\"h\":\"定义\"},\"23\":{\"h\":\"Top（⊤）状态：未知但有潜力\"},\"24\":{\"h\":\"Const 状态：确定是常量\"},\"25\":{\"h\":\"Bottom（NAC）状态：确定不是常量\"},\"26\":{\"h\":\"常量格的单调性\"},\"27\":{\"h\":\"函数的返回值处理\"},\"28\":{\"h\":\"一、函数调用处理的三大核心原则\"},\"29\":{\"h\":\"二、函数调用分类处理策略\"},\"30\":{\"h\":\"1. 完全可知函数（纯函数/内联函数）\"},\"31\":{\"h\":\"2. 部分可知函数（有摘要信息的库函数）\"},\"32\":{\"h\":\"3. 完全未知函数（外部/动态函数）\"},\"33\":{\"h\":\"三、格值设置详细规则\"},\"34\":{\"h\":\"返回值格值计算：\"},\"35\":{\"h\":\"副作用处理：\"},\"36\":{\"h\":\"四、高级处理技术\"},\"37\":{\"h\":\"1. 上下文敏感分析（Context Sensitivity）\"},\"38\":{\"h\":\"2. 函数指针处理\"},\"39\":{\"h\":\"3. 递归函数处理\"},\"40\":{\"h\":\"五、具体实现示例\"},\"41\":{\"h\":\"六、优化实践建议\"},\"42\":{\"h\":\"函数处理\"},\"43\":{\"h\":\"Meet 操作\"},\"44\":{\"h\":\"参数处理\"},\"45\":{\"h\":\"函数示例分析\"},\"46\":{\"h\":\"案例1：一致路径 + 未知路径\"},\"47\":{\"h\":\"案例2：冲突路径\"},\"48\":{\"h\":\"案例3：部分已知 + NAC\"},\"49\":{\"h\":\"案例4：循环中的Phi\"},\"50\":{\"h\":\"实际案例分析\"},\"51\":{\"h\":\"1. 设置为 NAC 的情况\"},\"52\":{\"h\":\"2. 设置为 TOP 的情况\"},\"53\":{\"h\":\"其他案例\"},\"54\":{\"h\":\"Lattice\"},\"55\":{\"h\":\"基础\"},\"56\":{\"h\":\"偏序(Partial Order)\"},\"57\":{\"h\":\"字典序(Lexicographic Order)\"},\"58\":{\"h\":\"哈斯图 (Hasse Diagrams)\"},\"59\":{\"h\":\"最大元素和最小元素(Maximal and Minimal Elements)\"},\"60\":{\"h\":\"拓扑排序(Topological Sorting)\"},\"61\":{\"h\":\"格(Lattice)\"},\"62\":{\"h\":\"1. 核心定义\"},\"63\":{\"h\":\"2. 等价代数定义\"},\"64\":{\"h\":\"3. 格的分类\"},\"65\":{\"h\":\"4. 示例\"},\"66\":{\"h\":\"乘积格(Product Lattice)\"},\"67\":{\"h\":\"静态单赋值形式 (Static Single Assignment Form)\"},\"68\":{\"h\":\"SSA 定义与计算\"},\"69\":{\"h\":\"支配者 (Dominator)\"},\"70\":{\"h\":\"函数的放置位置 (Where to Place -Functions)\"},\"71\":{\"h\":\"支配边界 (Dominance Frontier)\"},\"72\":{\"h\":\"迭代支配边界 (Iterated Dominance Frontier) ( )\"},\"73\":{\"h\":\"关键属性 (Key Properties)\"},\"74\":{\"h\":\"最小化SSA算法实现\"},\"75\":{\"h\":\"SSA边\"},\"76\":{\"h\":\"定义\"},\"77\":{\"h\":\"SSA 边的类型\"},\"78\":{\"h\":\"计算\"},\"79\":{\"h\":\"示例\"},\"80\":{\"h\":\"References\"},\"81\":{\"h\":\"Sparse Conditional Constant Propagation\"},\"82\":{\"h\":\"介绍\"},\"83\":{\"h\":\"算法实现\"},\"84\":{\"h\":\"总结\"},\"85\":{\"h\":\"示例\"},\"86\":{\"h\":\"数据流分析基础\"},\"87\":{\"h\":\"数据流分析模式\"},\"88\":{\"h\":\"传递函数\"},\"89\":{\"h\":\"控制流约束\"},\"90\":{\"h\":\"基本块上的数据流模式\"},\"91\":{\"h\":\"传递方程\"},\"92\":{\"h\":\"控制流方程\"},\"93\":{\"h\":\"初始值与安全值\"},\"94\":{\"h\":\"May分析和Must分析\"},\"95\":{\"h\":\"数据流分析框架\"},\"96\":{\"h\":\"半格\"},\"97\":{\"h\":\"传递函数\"},\"98\":{\"h\":\"单调框架\"},\"99\":{\"h\":\"数据流的解\"},\"100\":{\"h\":\"迭代算法\"},\"101\":{\"h\":\"参考文献\"},\"102\":{\"h\":\"Monotone Data Flow Analysis Frameworks\"},\"103\":{\"h\":\"Lattice Theoretic\"},\"104\":{\"h\":\"Monotone Data Flow Analysis Frameworks\"},\"105\":{\"h\":\"Approaches to Solving Monotone Data Flow Analysis Problems\"},\"106\":{\"h\":\"Undecidability of the MOP Problem for Monotone Data Flow Analysis Frameworks\"},\"107\":{\"h\":\"References\"},\"108\":{\"h\":\"到达定值\"},\"109\":{\"h\":\"到达定值的传递方程\"},\"110\":{\"h\":\"到达定值的格\"},\"111\":{\"h\":\"初始值和安全值\"},\"112\":{\"h\":\"PCIe 内存获取技术\"},\"113\":{\"h\":\"现代计算机体系结构的内存组织\"},\"114\":{\"h\":\"现代内存组织\"},\"115\":{\"h\":\"IOMMU\"},\"116\":{\"h\":\"PCH\"},\"117\":{\"h\":\"DMA\"},\"118\":{\"h\":\"Peripheral Component Interconnect Express\"},\"119\":{\"h\":\"PCI和PCIe\"},\"120\":{\"h\":\"协议层\"},\"121\":{\"h\":\"PCIe 外围设备\"},\"122\":{\"h\":\"根复合体\"},\"123\":{\"h\":\"使用PCIe的DMA\"},\"124\":{\"h\":\"Asynchronous Procedure Call\"},\"125\":{\"h\":\"APC对象\"},\"126\":{\"h\":\"\"},\"127\":{\"h\":\"APC 交付情况\"},\"128\":{\"h\":\"Windows 驱动开发基础\"},\"129\":{\"h\":\"主功能处理机制\"},\"130\":{\"h\":\"I/O 请求包 (IRP) 解析\"},\"131\":{\"h\":\"设备控制请求 (IOCTL) 专项说明\"},\"132\":{\"h\":\"IOCTL 控制码深度解析\"},\"133\":{\"h\":\"Windows句柄\"},\"134\":{\"h\":\"Windows内核中的对象管理\"},\"135\":{\"h\":\"\"},\"136\":{\"h\":\"Lattice\"},\"137\":{\"h\":\"Basics\"},\"138\":{\"h\":\"Compiler\"},\"139\":{\"h\":\"Ssa\"},\"140\":{\"h\":\"Sccp\"},\"141\":{\"h\":\"Symbolic Execution\"},\"142\":{\"h\":\"Intro\"},\"143\":{\"h\":\"Data Flow Analysis\"},\"144\":{\"h\":\"Monotone\"},\"145\":{\"h\":\"Reaching Definitions\"},\"146\":{\"h\":\"Pcie Memory Acquisition\"},\"147\":{\"h\":\"Storage\"},\"148\":{\"h\":\"Computer Systems\"},\"149\":{\"h\":\"Apc\"},\"150\":{\"h\":\"Ntoskrnl\"},\"151\":{\"h\":\"Operating Systems\"},\"152\":{\"h\":\"Driver\"},\"153\":{\"h\":\"Handle\"},\"154\":{\"h\":\"Object\"}},\"dirtCount\":0,\"index\":[[\"handle\",{\"0\":{\"153\":1}}],[\"hasse\",{\"0\":{\"58\":1}}],[\"reaching\",{\"0\":{\"145\":1}}],[\"references\",{\"0\":{\"80\":1,\"107\":1}}],[\"basics\",{\"0\":{\"137\":1}}],[\"bottom\",{\"0\":{\"25\":1}}],[\"控制码深度解析\",{\"0\":{\"132\":1}}],[\"控制流方程\",{\"0\":{\"92\":1}}],[\"控制流约束\",{\"0\":{\"89\":1}}],[\"专项说明\",{\"0\":{\"131\":1}}],[\"设备控制请求\",{\"0\":{\"131\":1}}],[\"设置为\",{\"0\":{\"51\":1,\"52\":1}}],[\"解析\",{\"0\":{\"130\":1}}],[\"请求包\",{\"0\":{\"130\":1}}],[\"主功能处理机制\",{\"0\":{\"129\":1}}],[\"交付情况\",{\"0\":{\"127\":1}}],[\"call\",{\"0\":{\"124\":1}}],[\"computer\",{\"0\":{\"148\":1}}],[\"component\",{\"0\":{\"118\":1}}],[\"compiler\",{\"0\":{\"1\":1,\"138\":1}}],[\"context\",{\"0\":{\"37\":1}}],[\"const\",{\"0\":{\"24\":1}}],[\"constant\",{\"0\":{\"11\":1,\"81\":1}}],[\"conditional\",{\"0\":{\"11\":1,\"81\":1}}],[\"使用pcie的dma\",{\"0\":{\"123\":1}}],[\"根复合体\",{\"0\":{\"122\":1}}],[\"外围设备\",{\"0\":{\"121\":1}}],[\"外部\",{\"0\":{\"32\":1}}],[\"协议层\",{\"0\":{\"120\":1}}],[\"intro\",{\"0\":{\"142\":1}}],[\"interconnect\",{\"0\":{\"118\":1}}],[\"ioctl\",{\"0\":{\"131\":1,\"132\":1}}],[\"iommu\",{\"0\":{\"115\":1}}],[\"irp\",{\"0\":{\"130\":1}}],[\"i\",{\"0\":{\"130\":1}}],[\"iterated\",{\"0\":{\"72\":1}}],[\"现代内存组织\",{\"0\":{\"114\":1}}],[\"现代计算机体系结构的内存组织\",{\"0\":{\"113\":1}}],[\"内存获取技术\",{\"0\":{\"112\":1}}],[\"内联函数\",{\"0\":{\"30\":1}}],[\"初始值和安全值\",{\"0\":{\"111\":1}}],[\"初始值与安全值\",{\"0\":{\"93\":1}}],[\"object\",{\"0\":{\"154\":1}}],[\"operating\",{\"0\":{\"151\":1}}],[\"o\",{\"0\":{\"130\":1}}],[\"of\",{\"0\":{\"106\":1}}],[\"order\",{\"0\":{\"56\":1,\"57\":1}}],[\"undecidability\",{\"0\":{\"106\":1}}],[\"参考文献\",{\"0\":{\"101\":1}}],[\"参数处理\",{\"0\":{\"44\":1}}],[\"迭代算法\",{\"0\":{\"100\":1}}],[\"迭代支配边界\",{\"0\":{\"72\":1}}],[\"数据流的解\",{\"0\":{\"99\":1}}],[\"数据流分析框架\",{\"0\":{\"95\":1}}],[\"数据流分析模式\",{\"0\":{\"87\":1}}],[\"数据流分析基础\",{\"0\":{\"8\":1,\"86\":1}}],[\"数据流分析\",{\"0\":{\"6\":1}}],[\"单调框架\",{\"0\":{\"98\":1}}],[\"单调数据流分析框架\",{\"0\":{\"7\":1}}],[\"半格\",{\"0\":{\"96\":1}}],[\"传递方程\",{\"0\":{\"91\":1}}],[\"传递函数\",{\"0\":{\"88\":1,\"97\":1}}],[\"基本块上的数据流模式\",{\"0\":{\"90\":1}}],[\"基础\",{\"0\":{\"55\":1}}],[\"总结\",{\"0\":{\"84\":1}}],[\"算法实现\",{\"0\":{\"83\":1}}],[\"介绍\",{\"0\":{\"82\":1}}],[\"计算\",{\"0\":{\"78\":1}}],[\"计算机存储结构\",{\"0\":{\"13\":1}}],[\"计算机系统\",{\"0\":{\"12\":1}}],[\"边的类型\",{\"0\":{\"77\":1}}],[\"最小化ssa算法实现\",{\"0\":{\"74\":1}}],[\"最大元素和最小元素\",{\"0\":{\"59\":1}}],[\"key\",{\"0\":{\"73\":1}}],[\"关键属性\",{\"0\":{\"73\":1}}],[\"支配边界\",{\"0\":{\"71\":1}}],[\"支配者\",{\"0\":{\"69\":1}}],[\"for\",{\"0\":{\"106\":1}}],[\"form\",{\"0\":{\"67\":1}}],[\"frameworks\",{\"0\":{\"102\":1,\"104\":1,\"106\":1}}],[\"frontier\",{\"0\":{\"71\":1,\"72\":1}}],[\"flow\",{\"0\":{\"102\":1,\"104\":1,\"105\":1,\"106\":1,\"143\":1}}],[\"functions\",{\"0\":{\"70\":1}}],[\"where\",{\"0\":{\"70\":1}}],[\"windows内核中的对象管理\",{\"0\":{\"134\":1}}],[\"windows句柄\",{\"0\":{\"133\":1}}],[\"windows\",{\"0\":{\"17\":1,\"128\":1}}],[\"driver\",{\"0\":{\"152\":1}}],[\"definitions\",{\"0\":{\"145\":1}}],[\"dma\",{\"0\":{\"117\":1}}],[\"data\",{\"0\":{\"102\":1,\"104\":1,\"105\":1,\"106\":1,\"143\":1}}],[\"dominance\",{\"0\":{\"71\":1,\"72\":1}}],[\"dominator\",{\"0\":{\"69\":1}}],[\"diagrams\",{\"0\":{\"58\":1}}],[\"乘积格\",{\"0\":{\"66\":1}}],[\"示例\",{\"0\":{\"65\":1,\"79\":1,\"85\":1}}],[\"4\",{\"0\":{\"65\":1}}],[\"等价代数定义\",{\"0\":{\"63\":1}}],[\"核心定义\",{\"0\":{\"62\":1}}],[\"拓扑排序\",{\"0\":{\"60\":1}}],[\"express\",{\"0\":{\"118\":1}}],[\"execution\",{\"0\":{\"10\":1,\"141\":1}}],[\"elements\",{\"0\":{\"59\":1}}],[\"memory\",{\"0\":{\"146\":1}}],[\"meet\",{\"0\":{\"43\":1}}],[\"mop\",{\"0\":{\"106\":1}}],[\"monotone\",{\"0\":{\"102\":1,\"104\":1,\"105\":1,\"106\":1,\"144\":1}}],[\"may分析和must分析\",{\"0\":{\"94\":1}}],[\"maximal\",{\"0\":{\"59\":1}}],[\"minimal\",{\"0\":{\"59\":1}}],[\"哈斯图\",{\"0\":{\"58\":1}}],[\"lexicographic\",{\"0\":{\"57\":1}}],[\"lattice\",{\"0\":{\"4\":1,\"54\":1,\"61\":1,\"66\":1,\"103\":1,\"136\":1}}],[\"字典序\",{\"0\":{\"57\":1}}],[\"偏序\",{\"0\":{\"56\":1}}],[\"其他案例\",{\"0\":{\"53\":1}}],[\"的情况\",{\"0\":{\"51\":1,\"52\":1}}],[\"实际案例分析\",{\"0\":{\"50\":1}}],[\"循环中的phi\",{\"0\":{\"49\":1}}],[\"部分已知\",{\"0\":{\"48\":1}}],[\"部分可知函数\",{\"0\":{\"31\":1}}],[\"冲突路径\",{\"0\":{\"47\":1}}],[\"案例4\",{\"0\":{\"49\":1}}],[\"案例3\",{\"0\":{\"48\":1}}],[\"案例2\",{\"0\":{\"47\":1}}],[\"案例1\",{\"0\":{\"46\":1}}],[\"未知路径\",{\"0\":{\"46\":1}}],[\"未知但有潜力\",{\"0\":{\"23\":1}}],[\"+\",{\"0\":{\"46\":1,\"48\":1}}],[\"操作\",{\"0\":{\"43\":1}}],[\"操作系统内核\",{\"0\":{\"15\":1}}],[\"优化实践建议\",{\"0\":{\"41\":1}}],[\"六\",{\"0\":{\"41\":1}}],[\"具体实现示例\",{\"0\":{\"40\":1}}],[\"五\",{\"0\":{\"40\":1}}],[\"递归函数处理\",{\"0\":{\"39\":1}}],[\"上下文敏感分析\",{\"0\":{\"37\":1}}],[\"高级处理技术\",{\"0\":{\"36\":1}}],[\"四\",{\"0\":{\"36\":1}}],[\"副作用处理\",{\"0\":{\"35\":1}}],[\"返回值格值计算\",{\"0\":{\"34\":1}}],[\"格的分类\",{\"0\":{\"64\":1}}],[\"格\",{\"0\":{\"61\":1}}],[\"格值设置详细规则\",{\"0\":{\"33\":1}}],[\"格论\",{\"0\":{\"4\":1}}],[\"三\",{\"0\":{\"33\":1}}],[\"动态函数\",{\"0\":{\"32\":1}}],[\"完全未知函数\",{\"0\":{\"32\":1}}],[\"完全可知函数\",{\"0\":{\"30\":1}}],[\"3\",{\"0\":{\"32\":1,\"39\":1,\"64\":1}}],[\"有摘要信息的库函数\",{\"0\":{\"31\":1}}],[\"2\",{\"0\":{\"31\":1,\"38\":1,\"52\":1,\"63\":1}}],[\"纯函数\",{\"0\":{\"30\":1}}],[\"1\",{\"0\":{\"30\":1,\"37\":1,\"51\":1,\"62\":1}}],[\"二\",{\"0\":{\"29\":1}}],[\"函数的放置位置\",{\"0\":{\"70\":1}}],[\"函数的返回值处理\",{\"0\":{\"27\":1}}],[\"函数示例分析\",{\"0\":{\"45\":1}}],[\"函数处理\",{\"0\":{\"42\":1}}],[\"函数指针处理\",{\"0\":{\"38\":1}}],[\"函数调用分类处理策略\",{\"0\":{\"29\":1}}],[\"函数调用处理的三大核心原则\",{\"0\":{\"28\":1}}],[\"一致路径\",{\"0\":{\"46\":1}}],[\"一\",{\"0\":{\"28\":1}}],[\"常量格的单调性\",{\"0\":{\"26\":1}}],[\"常量传播的格\",{\"0\":{\"21\":1}}],[\"常量传播中的常量格\",{\"0\":{\"5\":1}}],[\"确定不是常量\",{\"0\":{\"25\":1}}],[\"确定是常量\",{\"0\":{\"24\":1}}],[\"nac\",{\"0\":{\"25\":1,\"48\":1,\"51\":1}}],[\"ntoskrnl\",{\"0\":{\"16\":1,\"150\":1}}],[\"状态\",{\"0\":{\"23\":1,\"24\":1,\"25\":1}}],[\"⊤\",{\"0\":{\"23\":1}}],[\"the\",{\"0\":{\"106\":1}}],[\"theoretic\",{\"0\":{\"103\":1}}],[\"theory\",{\"0\":{\"4\":1}}],[\"to\",{\"0\":{\"70\":1,\"105\":1}}],[\"topological\",{\"0\":{\"60\":1}}],[\"top\",{\"0\":{\"23\":1,\"52\":1}}],[\"定义与计算\",{\"0\":{\"68\":1}}],[\"定义\",{\"0\":{\"22\":1,\"76\":1}}],[\"驱动开发基础\",{\"0\":{\"128\":1}}],[\"驱动\",{\"0\":{\"20\":1}}],[\"句柄\",{\"0\":{\"19\":1}}],[\"对象管理\",{\"0\":{\"18\":1}}],[\"acquisition\",{\"0\":{\"146\":1}}],[\"asynchronous\",{\"0\":{\"124\":1}}],[\"assignment\",{\"0\":{\"3\":1,\"67\":1}}],[\"approaches\",{\"0\":{\"105\":1}}],[\"apc对象\",{\"0\":{\"125\":1}}],[\"apc\",{\"0\":{\"17\":1,\"127\":1,\"149\":1}}],[\"analysis\",{\"0\":{\"102\":1,\"104\":1,\"105\":1,\"106\":1,\"143\":1}}],[\"and\",{\"0\":{\"59\":1}}],[\"peripheral\",{\"0\":{\"118\":1}}],[\"pci和pcie\",{\"0\":{\"119\":1}}],[\"pcie\",{\"0\":{\"112\":1,\"121\":1,\"146\":1}}],[\"pcie内存获取技术\",{\"0\":{\"14\":1}}],[\"pch\",{\"0\":{\"116\":1}}],[\"place\",{\"0\":{\"70\":1}}],[\"procedure\",{\"0\":{\"124\":1}}],[\"problem\",{\"0\":{\"106\":1}}],[\"problems\",{\"0\":{\"105\":1}}],[\"properties\",{\"0\":{\"73\":1}}],[\"propagation\",{\"0\":{\"11\":1,\"81\":1}}],[\"product\",{\"0\":{\"66\":1}}],[\"partial\",{\"0\":{\"56\":1}}],[\"稀疏条件常量传播\",{\"0\":{\"11\":1}}],[\"符号执行\",{\"0\":{\"10\":1}}],[\"到达定值的格\",{\"0\":{\"110\":1}}],[\"到达定值的传递方程\",{\"0\":{\"109\":1}}],[\"到达定值\",{\"0\":{\"9\":1,\"108\":1}}],[\"systems\",{\"0\":{\"148\":1,\"151\":1}}],[\"symbolic\",{\"0\":{\"10\":1,\"141\":1}}],[\"storage\",{\"0\":{\"147\":1}}],[\"static\",{\"0\":{\"3\":1,\"67\":1}}],[\"sccp\",{\"0\":{\"140\":1}}],[\"solving\",{\"0\":{\"105\":1}}],[\"sorting\",{\"0\":{\"60\":1}}],[\"sensitivity\",{\"0\":{\"37\":1}}],[\"sparse\",{\"0\":{\"11\":1,\"81\":1}}],[\"ssa边\",{\"0\":{\"75\":1}}],[\"ssa\",{\"0\":{\"3\":1,\"68\":1,\"77\":1,\"139\":1}}],[\"single\",{\"0\":{\"3\":1,\"67\":1}}],[\"静态单赋值形式\",{\"0\":{\"3\":1,\"67\":1}}],[\"分析基础\",{\"0\":{\"2\":1}}],[\"城城的笔记\",{\"0\":{\"0\":1}}]],\"version\":2}}")).map(([e,t])=>[e,It(t,{fields:["h","t","c"],storeFields:["h","t","c"]})]));self.onmessage=({data:{type:e="all",query:t,locale:s,options:n,id:o}})=>{const r=Ct[s];e==="suggest"?self.postMessage([e,o,tt(t,r,n)]):e==="search"?self.postMessage([e,o,Z(t,r,n)]):self.postMessage({suggestions:[e,o,tt(t,r,n)],results:[e,o,Z(t,r,n)]})};
//# sourceMappingURL=index.js.map
